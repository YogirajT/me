@import url(https://fonts.googleapis.com/css?family=Montserrat);

// ------------- MIXINS ------------- //
@mixin transition($time, $property: all, $easing: ease-in) {
  transition: $property $time $easing;
}

// ------------------------------------------------------------

$breakpoints: (
  "phone": 414px,
  "tablet": 768px,
  "desktop": 1024px,
) !default;

$media-expressions: (
  'screen': 'screen', 
  'print': 'print', 
  'handheld': 'handheld',
  'retina2x': (
    '(-webkit-min-device-pixel-ratio: 2)', 
    '(min-resolution: 192dpi)'
  ), 
  'retina3x': (
    '(-webkit-min-device-pixel-ratio: 3)', 
    '(min-resolution: 350dpi)'
  )
) !default;

$unit-intervals: (
  'px': 1, 
  'em': 0.01, 
  'rem': 0.1
) !default;

@mixin media($conditions...) {
  @for $i from 1 through length($conditions) {
    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));
  }

  $branches: get-query-branches($conditions);
  $query: '';

  @each $branch in $branches {
    @if (str-length($query) != 0) {
      $query: $query + ', ';
    }

    $query: $query + $branch;
  }

  @media #{$query} {
    @content;
  }
}

@function get-query-branches($expressions) {
  $result: '';
  $has-groups: false;

  // Getting initial snapshot and looking for groups
  @each $expression in $expressions {
    @if (str-length($result) != 0) {
      $result: $result + ' and ';
    }

    @if (type-of($expression) == 'string') {
      $result: $result + $expression;
    } @else if (type-of($expression) == 'list') {
      $result: $result + nth($expression, 1);
      $has-groups: true;
    } @else {
      @warn '#{$expression} is not a valid expression.';
    }
  }
  @if $has-groups {
    @each $expression in $expressions {
      @if (type-of($expression) == 'list') {
        $first: nth($expression, 1);

        @each $member in $expression {
          @if ($member != $first) {
            @each $partial in $result {
              $result: join($result, str-replace-first($first, $member, $partial));
            }
          }
        }
      }
    }
  }

  @return $result;
}

@function parse-expression($expression) {
  $operator: '';
  $value: '';
  $element: '';
  $result: '';
  $is-width: true;

  @if (type-of($expression) != 'string') {
    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';
  }

  @if (str-slice($expression, 2, 2) == '=') {
    $operator: str-slice($expression, 1, 2);
    $value: str-slice($expression, 3);
  } @else {
    $operator: str-slice($expression, 1, 1);
    $value: str-slice($expression, 2);
  }

  @if map-has-key($breakpoints, $value) {
    $result: map-get($breakpoints, $value);
  } @else if map-has-key($media-expressions, $expression) {
    $result: map-get($media-expressions, $expression);
    $is-width: false;
  } @else {
    $result: to-number($value);
  }

  @if ($is-width) {
    $unit: unit($result);
    $interval: 0;
    
    @if (map-has-key($unit-intervals, $unit)) {
      $interval: map-get($unit-intervals, $unit);
    } @else {
      @warn 'Unknown unit: #{$unit}';
    } 
       
    @if ($operator == '>') {
      $element: '(min-width: #{$result + $interval})';
    } @else if ($operator == '<') {
      $element: '(max-width: #{$result - $interval})';
    } @else if ($operator == '>=') {
      $element: '(min-width: #{$result})';
    } @else if ($operator == '<=') {
      $element: '(max-width: #{$result})';
    } @else {
      @warn '#{$expression} is missing an operator.';
    }
  } @else {
    $element: $result;
  }

  @return $element;
}

@function str-replace-first($search, $replace, $subject) {
  $search-start: str-index($subject, $search);

  @if $search-start == null {
    @return $subject;
  }

  $result: str-slice($subject, 0, $search-start - 1);
  $result: $result + $replace;
  $result: $result + str-slice($subject, $search-start + str-length($search));

  @return $result;
}

@function to-number($string) {
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers:  0   1   2   3   4   5   6   7   8   9;
  
  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);
    
  
    @if $character == '-' {
      $minus: true;
    }
    
    @else if $character == '.' {
      $divider: 1;
    }
    
    @else {
      @if type-of($index) != 'number' {
        $result: if($minus, $result * -1, $result);
        @return _length($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);
      
      @if $divider == 0 {
        $result: $result * 10;
      }
      
      @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }
      
      $result: $result + $number;
    }
  }
  
  @return if($minus, $result * -1, $result);
}

@function _length($number, $unit) {
  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
  $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
  $index: index($strings, $unit);
  
  @if type-of($index) != 'number' {
    @warn 'Unknown unit `#{$unit}`.';
    @return false;
  }
  
  @return $number * nth($units, $index);
}


// ------------- VARIABLES ------------- //
$parallax-offset: 30vh;
$content-offset: 40vh;
$transition-speed: 1.2s;
$slide-number: 3;

// -------------- FRAMES ------------ //

@keyframes TopFadeIn {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes FadeIn {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

@keyframes BottomFadeIn {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

html,
body {
  overflow: hidden;
}

.background {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
  overflow: hidden;
  will-change: transform;
  backface-visibility: hidden;
  height: 100vh + $parallax-offset;
  position: fixed;
  width: 100%;
  transform: translateY($parallax-offset);
  @include transition($transition-speed, all, cubic-bezier(0.22, 0.44, 0, 1));

  &:before {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.3);
  }

  &:first-child {
    background-image: url(assets/img-1.jpg);
    transform: translateY(-$parallax-offset / 2);

    .content-wrapper {
      transform: translateY($parallax-offset / 2);
    }
  }

  &:nth-child(2) {
    background-image: url(assets/img-2.jpg);
  }

  &:nth-child(3) {
    background-image: url(assets/img-3.jpg);
  }
}

/* Set stacking context of slides */
@for $i from 1 to ($slide-number + 1) {
  .background:nth-child(#{$i}) {
    z-index: ($slide-number + 1) - $i;
  }
}

.content {
  &-wrapper {
    height: 100vh;
    display: flex;
    justify-content: center;
    text-align: center;
    flex-flow: column nowrap;
    color: #fff;
    font-family: Montserrat;
    transform: translateY($content-offset);
    will-change: transform;
    backface-visibility: hidden;
    align-items: center;
    @include transition(
      $transition-speed + 0.5,
      all,
      cubic-bezier(0.22, 0.44, 0, 1)
    );

    & article {
      text-align: left;
    }
  }

  &-title {
    &-1,
    &-2,
    &-3 {
      font-size: 12vh;
      line-height: 1.4;

      &:not(.animation) {
        opacity: 0;
        transform: translateY(-20px);
      }

      &.animation {
        animation: $transition-speed ease-in 0s 1 TopFadeIn;
      }

      &:not(.animation) {
        opacity: 0;
        transform: translateY(-20px);
      }

      &.animation {
        animation: $transition-speed ease-in 0s 1 TopFadeIn;
      }
    }

    &-2,
    &-3 {
      font-size: 8vh;
    }
  }

  &-avatar {
    border-radius: 50%;
    background-image: url(/assets/profile.jpg);
    background-clip: border-box;
    width: 8em;
    height: 8em;
    animation: $transition-speed ease-in 0s 1 FadeIn;
    background-size: cover;
  }

  &-subtitle-1,
  &-subtitle-2,
  &-subtitle-3 {
    max-width: min(90vw, 40rem);
    font-weight: 900;
    &:not(.animation) {
      opacity: 0;
      transform: translateY(20px);
    }
    &.animation {
      animation: $transition-speed ease-in 0s 1 BottomFadeIn;
    }
  }

  &-subtitle-2 {
    text-align: left;
    overflow-y: auto;
    max-width: min(90vw, 40rem);

    @include media("<=phone") {
      max-height: 16rem;
    }
  
    @include media(">phone") {
      max-height: 80vh;
    }
    
    & h2 {
      font-size: 2rem;
      text-decoration: underline;
      line-height: 2.8rem;
    }
    & p {
      line-height: 1.4rem;
      font-size: 1rem;
    }
  }

  &-link {
    font-size: 1rem;
    font-weight: 900;
    color: #fff;

    &:hover {
      color: lime;
    }

    display: block;
    line-height: 1.4rem;
    @include transition($transition-speed, all, cubic-bezier(0.22, 0.44, 0, 1));
  }
}

// ------------- SOCIAL MEDIA STYLES -------------- //

.content-social {
  position: absolute;
  top: 2rem;
  right: 1rem;
  z-index: 1000;

  & ul {
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;

    & li {
      list-style: none;
      & a {
        display: block;
        position: relative;
        width: 4rem;
        height: 4rem;
        line-height: 4rem;
        font-size: 2rem;
        text-align: center;
        text-decoration: none;
        color: #404040;
        margin: 0 1rem;
        transition: 0.5s;

        & span {
          position: absolute;
          transition: transform 0.5s;

          &:nth-child(1),
          &:nth-child(3) {
            height: 100%;
            width: 3px;
            background: #404040;
          }

          &:nth-child(1) {
            top: 0;
            left: 0;
            transform-origin: bottom;
          }

          &:nth-child(3) {
            bottom: 0;
            right: 0;
            transform-origin: top;
          }

          &:nth-child(2),
          &:nth-child(4) {
            width: 100%;
            height: 3px;
            background: #404040;
          }

          &:nth-child(2) {
            left: 0;
            bottom: 0;
            transform: scale(0);
            transform-origin: right;
          }

          &:nth-child(4) {
            left: 0;
            top: 0;
            transform: scale(0);
            transform-origin: left;
          }
        }

        &:hover span:nth-child(1) {
          transform: scaleY(0);
          transform-origin: top;
          transition: transform 0.5s;
        }

        &:hover span:nth-child(3) {
          transform: scaleY(0);
          transform-origin: bottom;
          transition: transform 0.5s;
        }

        &:hover span:nth-child(2) {
          transform: scale(1);
          transform-origin: left;
          transition: transform 0.5s;
        }

        &:hover span:nth-child(4) {
          transform: scale(1);
          transform-origin: right;
          transition: transform 0.5s;
        }
      }
    }

    .github:hover {
      color: #fff;
    }

    .github:hover span {
      background: #fff;
    }

    .linkedin:hover {
      color: #0072b1;
    }

    .linkedin:hover span {
      background: #0072b1;
    }

    .cv:hover {
      color: #d1097e;
    }

    .cv:hover span {
      background: #d1097e;
    }
  }
}

// ------------- SET TRANSFORM VALUES ------------- //

.background.up-scroll {
  transform: translate3d(0, -$parallax-offset / 2, 0);

  .content-wrapper {
    transform: translateY($parallax-offset / 2);
  }

  + .background {
    transform: translate3d(0, $parallax-offset, 0);

    .content-wrapper {
      transform: translateY($parallax-offset);
    }
  }
}

.background.down-scroll {
  transform: translate3d(0, -(100vh + $parallax-offset), 0);

  .content-wrapper {
    transform: translateY($content-offset);
  }

  + .background:not(.down-scroll) {
    transform: translate3d(0, -$parallax-offset / 2, 0);

    .content-wrapper {
      transform: translateY($parallax-offset / 2);
    }
  }
}

// ------------- SCROLLBAR ------------- //

*::-webkit-scrollbar {
  width: 0.25rem;
}

*::-webkit-scrollbar-track {
  box-shadow: inset 0 0 0.25rem black;
}

*::-webkit-scrollbar-thumb {
  background-color: darkgrey;
  outline: 0.125rem solid slategrey;
}
